help()
help(getwd)
getwd(D:\Documenten\Thesis\Tabellen)
getwd
setwd(D:\Documenten\Thesis\Tabellen)
setwd("D:\Documenten\Thesis\Tabellen")
getwd()
setwd("C:/Users/ninad/Documents/Thesis/Jupyter_en_R_notebooks/Statistiek")
features2 = read.csv(file = "Dataset_features_2", header = TRUE, fill = TRUE)
#install.packages("plyr")
library(plyr)
features2 = rename(features2, c("accumulated_euclidian_distance"="euclidian_distance"))
#install.packages("car")
library(car)
#set PBS as baseline for the model to compare with
features2_relevelled <- within(features2, treatment <- relevel(treatment, ref = "PBS"))
#check multivariate normality
x.features2 = features2[,1:7] #enkel de numeric features meenemen
x.features2.c = x.features2[features2$status=="control",]
x.features2.m = x.features2[features2$status == "mild",]
x.features2.s = x.features2[features2$status == "severe",]
cor(x.features2)
cor(x.features2.c)
mahF = mahalanobis(x.features2.c, colMeans(x.features2.c), var(x.features2.c))
summary(mahF)
View(x.features2.c)
cor(x.features2, use = complete.obs)
cor(x.features2, use = "complete.obs")
cor(x.features2.c, use = "complete.obs")
mahF = mahalanobis(x.features2.c, colMeans(x.features2.c), var(x.features2.c))
summary(mahF)
install.packages("devtools")
devtools::install_github("martinSter/modi")
library(modi)
MDmiss(x.features2.c, colMeans(x.features2.c), var(x.features2.c))
str(x.features2.c)
complete.cases(x.features2.C)
complete.cases(x.features2.c)
row_withNAN = complete.cases(x.features2.c)
score = 0
for (element in row_withNAN){
if(element == FALSE){
score += 1
}
score
str(x.features2.c)
row_withNAN = complete.cases(x.features2.c)
score = 0
for (element in row_withNAN){
if(element == FALSE){
score += 1
}
}
score
x.features2.c.noNAN = x.features2.c[row_withNAN,]
View(x.features2.c.noNAN)
mahF = mahalanobis(x.features2.c.noNAN, colMeans(x.features2.c.noNAN), var(x.features2.c.noNAN))
summary(mahF)
qqplot(qchisq(ppoints(mahF), df = 7), mahF, main = "QQ-plot control status", xlab = "expected", ylab = "observed")
qqline(mahF, distribution = function(p) qchisq(p, df = 7), col = 2)
x.features2.m.noNAN = x.features2.m[row_withNAN,]
mahF = mahalanobis(x.features2.m.noNAN, colMeans(x.features2.m.noNAN), var(x.features2.m.noNAN))
summary(mahF)
x.features2.m.noNAN = x.features2.m[complete.cases(x.features2.m),]
mahF = mahalanobis(x.features2.m.noNAN, colMeans(x.features2.m.noNAN), var(x.features2.m.noNAN))
summary(mahF)
qqplot(qchisq(ppoints(mahF), df = 7), mahF, main = "QQ-plot mild status", xlab = "expected", ylab = "observed")
qqline(mahF, distribution = function(p) qchisq(p, df = 7), col = 2)
x.features2.s.noNAN = x.features2.s[complete.cases(x.features2.s),]
mahF = mahalanobis(x.features2.s.noNAN, colMeans(x.features2.s.noNAN), var(x.features2.s.noNAN))
summary(mahF)
qqplot(qchisq(ppoints(mahF), df = 7), mahF, main = "QQ-plot severe status", xlab = "expected", ylab = "observed")
qqline(mahF, distribution = function(p) qchisq(p, df = 7), col = 2)
qqplot(qchisq(ppoints(log(mahF)), df = 7), log(mahF), main = "QQ-plot control status", xlab = "expected", ylab = "observed")
qqline(log(mahF), distribution = function(p) qchisq(p, df = 7), col = 2)
View(features2)
BoxM.test(dataset=features2, testvar=c(1:7), groupvar=8)
status = features2$status
boxM(x.features2, status)
install.packages("biotools")
library(biotools)
boxM(x.features2, status)
x.features2.notNAN = x.features2[complete.cases(x.features2,)]
x.features2.notNAN = x.features2[complete.cases(x.features2),]
boxM(x.features2.notNAN, status)
features2.notNAN = features2[complete.cases(features2),]
boxM(x.features2.notNAN, features2.notNAN$status)
qqplot(qchisq(ppoints(log(mahF)), df = 7), log(mahF), main = "QQ-plot control status", xlab = "expected", ylab = "observed")
qqline(log(mahF), distribution = function(p) qchisq(p, df = 7), col = 2)
residuals(mahF)
